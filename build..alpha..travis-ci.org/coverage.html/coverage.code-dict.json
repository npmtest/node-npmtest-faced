{"/home/travis/build/npmtest/node-npmtest-faced/test.js":"/* istanbul instrument in package npmtest_faced */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-faced/lib.npmtest_faced.js":"/* istanbul instrument in package npmtest_faced */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_faced = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_faced = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-faced/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-faced && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_faced */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_faced\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_faced.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_faced.rollup.js'] =\n            local.assetsDict['/assets.npmtest_faced.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_faced.__dirname + '/lib.npmtest_faced.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-faced/node_modules/faced/lib/faced.js":"/*jslint node: true, nomen:true*/\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar OpenCV = require(\"opencv\");\nvar Detector = require(\"./detector\");\nvar path = require('path');\n\nvar hc_path = path.join(path.dirname(require.resolve(\"opencv\")), '..', 'data');\nvar cascades = {\n    \"face\": path.join(hc_path, \"haarcascade_frontalface_alt2.xml\"),\n    \"mouth\": path.join(hc_path, \"haarcascade_mcs_mouth.xml\"),\n    \"nose\": path.join(hc_path, \"haarcascade_mcs_nose.xml\"),\n    \"eyeLeft\": path.join(hc_path, \"haarcascade_mcs_lefteye.xml\"),\n    \"eyeRight\": path.join(hc_path, \"haarcascade_mcs_righteye.xml\")\n};\n\nfunction Faced() {\n    this.cascades = {};\n\n    _.each(cascades, function (path, element) {\n        this.cascades[element] = new OpenCV.CascadeClassifier(path);\n    }, this);\n}\n\nFaced.prototype.detect = function (path, fn, context) {\n    if (!this.cascades) {\n        throw new Error(\"Faced has been destroyed\");\n    }\n\n    OpenCV.readImage(path, _.bind(function (err, img) {\n        var detector, size;\n\n        if (err || typeof img !== \"object\") {\n            return fn.call(context, undefined, undefined, path);\n        }\n\n        size = img.size();\n\n        if (size[0] === 0 || size[1] === 0) {\n            return fn.call(context, undefined, undefined, path);\n        }\n\n        detector = new Detector(this.cascades);\n        detector.run(img, function (faces) {\n            fn.call(context, faces, img, path);\n        });\n    }, this));\n};\n\nFaced.prototype.destroy = function () {\n    delete this.cascades;\n};\n\nmodule.exports = Faced;\n","/home/travis/build/npmtest/node-npmtest-faced/node_modules/faced/lib/detector.js":"/*jslint node: true, nomen:true*/\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Face = require(\"./face\");\nvar Feature = require(\"./feature\");\n\nvar getFaces;\n\nvar Detector = function (cascades) {\n    this.cascades = cascades;\n};\n\nDetector.prototype.run = function (image, fn, context) {\n    var detections = {},\n        complete;\n\n    complete = _.after(_.keys(this.cascades).length, function () {\n        fn.call(context, getFaces(detections), image);\n    });\n\n    _.each(this.cascades, function (cascade, element) {\n        cascade.detectMultiScale(image, function (error, objects) {\n            detections[element] = !error ? objects : [];\n            complete();\n        });\n    });\n};\n\ngetFaces = function (detections) {\n    var faces = [];\n\n    function outside(input, test) {\n        return test.x > input.x + input.width ||\n            test.x + test.width < input.x ||\n            test.y > input.y + input.height ||\n            test.y + test.height < input.y;\n    }\n\n    _.each(detections.face, function (face) {\n        var currentFace = new Face(face);\n\n        _.each(detections, function (detect, element) {\n            if (element === \"face\") {\n                return;\n            }\n\n            _.each(detect, function (properties) {\n                if (!outside(face, properties)) {\n                    currentFace.add(element, new Feature(properties));\n                }\n            });\n        });\n\n        currentFace.normalize();\n\n        if (currentFace.getFeatureCount() > 0) {\n            faces.push(currentFace);\n        }\n    });\n\n    return faces;\n}\n\nmodule.exports = Detector;\n","/home/travis/build/npmtest/node-npmtest-faced/node_modules/faced/lib/face.js":"/*jslint node: true, nomen: true*/\n\"use strict\";\n\nvar _ = require(\"underscore\");\nvar Feature = require(\"./feature\");\n\nvar allowedFeatures = [\n    \"mouth\",\n    \"nose\",\n    \"eyeLeft\",\n    \"eyeRight\"\n];\n\nfunction Face(attributes) {\n    Feature.prototype.constructor.apply(this, arguments);\n\n    _.each(allowedFeatures, function (feature) {\n        this[feature] = [];\n    }, this);\n}\n\nFace.prototype = new Feature();\nFace.prototype.constructor = Face;\n\nFace.prototype.add = function (name, feature) {\n    if (feature instanceof Feature === false) {\n        throw new TypeError(\"feature is not class of Instance\");\n    }\n\n    if (!_.contains(allowedFeatures, name)) {\n        throw new Error(\"feature name is not allowed: \" + name);\n    }\n\n    this[name].push(feature);\n};\n\nFace.prototype.getFeatureCount = function (feature) {\n    if (feature) {\n        return this.getFeatures(feature).length;\n    }\n\n    return _.filter(\n        _.map(allowedFeatures, function (feature) {\n            return this[feature].length;\n        }, this),\n        function (count) {\n            return count > 0;\n        },\n        this\n    ).length;\n};\n\nFace.prototype.getFeature = function (feature) {\n    if (_.contains(allowedFeatures, feature)) {\n        switch (this[feature].length) {\n        case 0:\n            return;\n\n        case 1:\n            return this[feature][0];\n\n        default:\n            return this[feature];\n        }\n    }\n};\n\nFace.prototype.getFeatures = function (feature) {\n    var features = {};\n\n    if (feature && _.contains(allowedFeatures, feature)) {\n        return this[feature];\n    }\n\n    _.each(allowedFeatures, function (feature) {\n        features[feature] = this[feature];\n    }, this);\n\n    return features;\n};\n\nFace.prototype.getMouth = function () {\n    return this.getFeature(\"mouth\");\n};\n\nFace.prototype.getNose = function () {\n    return this.getFeature(\"nose\");\n};\n\nFace.prototype.getEyeLeft = function () {\n    return this.getFeature(\"eyeRight\");\n};\n\nFace.prototype.getEyeRight = function () {\n    return this.getFeature(\"eyeLeft\");\n};\n\nFace.prototype.remove = function (name, feature) {\n    this[name] = _.difference(this[name], [feature]);\n};\n\nFace.prototype.getNoseCenteredness = function (nose) {\n    var mouth = this.getMouth(),\n        horizontal,\n        vertical;\n\n    if (!mouth) {\n        return 0;\n    }\n\n    horizontal = (\n        (nose.getX() - this.getX())\n        +\n        (nose.getWidth() / 2)\n    ) / this.getWidth();\n\n    vertical = (\n        (nose.getY() - this.getY())\n        +\n        (nose.getHeight() / 2)\n    ) / this.getHeight();\n\n    return Math.abs(\n        ((horizontal + vertical) / 2) - 0.5\n    );\n};\n\nFace.prototype.normalize = function () {\n    this.stripExternalFeatures();\n\n    if (!this.getFeatureCount()) {\n        return;\n    }\n\n    this.isolateMouth();\n    this.isolateNose();\n    this.isolateEyes();\n};\n\nFace.prototype.stripExternalFeatures = function () {\n    _.each(this.getFeatures(), function (features, name) {\n        _.each(features, function (feature) {\n            if (this.intersect(feature) < 1) {\n                this.remove(name, feature);\n            }\n        }, this);\n    }, this);\n};\n\nFace.prototype.isolateMouth = function () {\n    var bestMouth;\n\n    _.each(this.getFeatures(\"mouth\"), function (mouth) {\n        var toRemove;\n\n        if (!bestMouth) {\n            bestMouth = mouth;\n            return;\n        }\n\n        if (mouth.getY() > bestMouth.getY()) {\n            toRemove = bestMouth;\n            bestMouth = mouth;\n        } else {\n            toRemove = mouth;\n        }\n\n        if (toRemove) {\n            this.remove(\"mouth\", toRemove);\n        }\n    }, this);\n};\n\nFace.prototype.isolateNose = function () {\n    var mouth = this.getMouth(),\n        bestNose;\n\n    // if we have a mouth lets remove all the noses that do not intersect it\n    if (mouth) {\n        _.each(this.getFeatures(\"nose\"), function (nose) {\n            if (nose.intersect(mouth) === 0) {\n                this.remove(\"nose\", nose);\n            }\n        }, this);\n    }\n\n    if (this.getFeatures(\"nose\").length <= 1) {\n        return;\n    }\n\n    // we have more than one nose, lets select the most centrally-aligned one\n    _.each(this.getFeatures(\"nose\"), function (nose) {\n        var toRemove;\n\n        if (!bestNose) {\n            bestNose = nose;\n            return;\n        }\n\n        if (this.getNoseCenteredness(nose) < this.getNoseCenteredness(bestNose)) {\n            toRemove = bestNose;\n            bestNose = nose;\n        } else {\n            toRemove = nose;\n        }\n\n        if (toRemove) {\n            this.remove(\"nose\", nose);\n        }\n    }, this);\n};\n\nFace.prototype.isolateEyes = function () {\n    var eyes,\n        maximumY = this.getY() + Math.abs(this.getHeight() / 2),\n        minimumXforRightEye,\n        maximumXforLeftEye;\n\n    // first lets discard all the eyes that do no start\n    // on the upper half of the face\n\n    _.each(this.getFeatures(\"eyeLeft\"), function (eye) {\n        if (eye.getY() > maximumY) {\n            this.remove(\"eyeLeft\", eye);\n        }\n    }, this);\n\n    _.each(this.getFeatures(\"eyeRight\"), function (eye) {\n        if (eye.getY() > maximumY) {\n            this.remove(\"eyeRight\", eye);\n        }\n    }, this);\n\n    // jackpot!\n    if (this.getFeatures(\"eyeLeft\").length === 1 &&\n            this.getFeatures(\"eyeRight\").length === 1) {\n        return;\n    }\n\n    eyes = [ 'eyeLeft', 'eyeRight' ];\n\n    // Lets remove all eyes that are within each other\n    _.each(eyes, function (eyeName, idx) {\n        _.each(this.getFeatures(eyeName), function (eye) {\n            var subEyeName = eyes[idx ? 0 : 1];\n\n            _.each(this.getFeatures(subEyeName), function (subEye) {\n                if (eye === subEye) {\n                    return;\n                }\n\n                if (eye.intersect(subEye)) {\n                    this.remove(subEyeName, subEye);\n                }\n            }, this);\n        }, this);\n    }, this);\n\n    // If we have a pair of the same eye and none of the other\n    // set one of them as the other eye\n    _.each(eyes, function (eyeName, idx) {\n        var eyeFeatures, otherEyeFeatures,\n            otherEyeName = eyes[idx ? 0 : 1];\n\n        eyeFeatures = this.getFeatures(eyeName);\n        otherEyeFeatures = this.getFeatures(otherEyeName);\n\n        if (eyeFeatures.length === 2 && otherEyeFeatures.length === 0) {\n            eyeFeatures = this.getFeatures(eyeName);\n\n\n            if (eyeFeatures[0].getX() > eyeFeatures[1].getX()) {\n                this.remove(eyeName, eyeFeatures[0]);\n                this.add(otherEyeName, eyeFeatures[0]);\n            } else {\n                this.remove(eyeName, eyeFeatures[1]);\n                this.add(otherEyeName, eyeFeatures[1]);\n            }\n        }\n    }, this);\n\n    // jackpot!\n    if (this.getFeatures(\"eyeLeft\").length === 1 &&\n            this.getFeatures(\"eyeRight\").length === 1) {\n        return;\n    }\n\n    // Lets remove right-side eyes from the left side\n    minimumXforRightEye = this.getX() + Math.abs(this.getWidth() * 0.33);\n\n    _.each(this.getFeatures(\"eyeRight\"), function (eye) {\n        if (eye.getX() < minimumXforRightEye) {\n            this.remove(\"eyeRight\", eye);\n        }\n    }, this);\n\n    // Lets remove right-side eyes from the left side\n    maximumXforLeftEye = this.getX() + Math.abs(this.getWidth() * 0.66);\n\n    _.each(this.getFeatures(\"eyeLeft\"), function (eye) {\n        if (eye.getX2() > maximumXforLeftEye) {\n            this.remove(\"eyeLeft\", eye);\n        }\n    }, this);\n};\n\nmodule.exports = Face;\n","/home/travis/build/npmtest/node-npmtest-faced/node_modules/faced/lib/feature.js":"/*jslint node: true, nomen: true*/\n\"use strict\";\n\nfunction Feature(attributes) {\n    if (attributes) {\n        this.x = attributes.x;\n        this.y = attributes.y;\n        this.width = attributes.width;\n        this.height = attributes.height;\n    }\n}\n\nFeature.prototype.getX = function () {\n    return this.x;\n};\n\nFeature.prototype.getY = function () {\n    return this.y;\n};\n\nFeature.prototype.getX2 = function () {\n    return this.getX() + this.getWidth();\n};\n\nFeature.prototype.getY2 = function () {\n    return this.getY() + this.getHeight();\n};\n\nFeature.prototype.getWidth = function () {\n    return this.width;\n};\n\nFeature.prototype.getHeight = function () {\n    return this.height;\n};\n\nFeature.prototype.intersect = function (feature) {\n    var excessHeightTop,\n        excessHeightBottom,\n        excessWidthLeft,\n        excessWidthRight,\n        excessHeight,\n        excessWidth,\n        excess;\n\n    // test for intersection\n    if ((\n            this.getX2() < feature.getX() ||\n            this.getX() > feature.getX2() ||\n            this.getY2() < feature.getY() ||\n            this.getY() > feature.getY2()\n        )) {\n        return 0;\n    }\n\n    excessHeightTop = (this.getY() - feature.getY());\n    excessHeightBottom = (feature.getY2() - this.getY2());\n    excessWidthLeft = (this.getX() - feature.getX());\n    excessWidthRight = (feature.getX2() - this.getX2());\n\n    excessHeight = (\n        (excessHeightTop > 0 ? excessHeightTop : 0)\n        +\n        (excessHeightBottom > 0 ? excessHeightBottom : 0)\n    );\n\n    excessWidth = (\n        (excessWidthLeft > 0 ? excessWidthLeft : 0)\n        +\n        (excessWidthRight > 0 ? excessWidthRight : 0)\n    );\n\n    excess = (\n        excessHeight * feature.getWidth()\n        +\n        excessWidth * feature.getHeight()\n    );\n\n    return 1 - (excess / (feature.getWidth() * feature.getHeight()));\n};\n\nmodule.exports = Feature;\n"}